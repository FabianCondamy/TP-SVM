---
title: "Compte rendu du TP SVM"
format: html
author: "Fabian Condamy et Samy M'Rad"
jupyter: python3
---

**Question 1**

```{python}
import numpy as np
from sklearn import datasets
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split

# Chargement du jeu de données
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Sélection des bonnes variables
X = X[y != 0, :2]
y = y[y != 0]

# Séparation de la moitié des données
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.5, random_state=42, stratify=y
)

# Modèle SVM à noyau linéaire de sklearn
svm = SVC(kernel='linear')
svm.fit(X_train, y_train)

# Prédiction réalisée sur la partie test après train
y_pred = svm.predict(X_test)

# Évaluation
correct = np.sum(y_pred == y_test)
total = len(y_test)
accuracy = correct / total

print(f"Nombre de bonnes prédictions : {correct}/{total}")
print(f"Taux de réussite : {accuracy * 100:.2f}%")
```


**Question 2**

```{python}
## Code quasiment identique
import numpy as np
from sklearn import datasets
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split

iris = datasets.load_iris()
X = iris.data
y = iris.target

X = X[y != 0, :2]
y = y[y != 0]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.5, random_state=42, stratify=y
)

# Modèle SVM à noyau polynomial de sklearn
svm = SVC(kernel='poly')
svm.fit(X_train, y_train)

y_pred = svm.predict(X_test)

correct = np.sum(y_pred == y_test)
total = len(y_test)
accuracy = correct / total

print(f"Nombre de bonnes prédictions : {correct}/{total}")
print(f"Taux de réussite : {accuracy * 100:.2f}%")
```